// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rtruncnorm
double rtruncnorm(const double mu, const double sigma, const double a, const double b);
RcppExport SEXP _farva_rtruncnorm(SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm(mu, sigma, a, b));
    return rcpp_result_gen;
END_RCPP
}
// rmvnrnd
arma::mat rmvnrnd(arma::vec mu, arma::mat Sigma, int n);
RcppExport SEXP _farva_rmvnrnd(SEXP muSEXP, SEXP SigmaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnrnd(mu, Sigma, n));
    return rcpp_result_gen;
END_RCPP
}
// rnormArma
double rnormArma(double mu, double sig_sq);
RcppExport SEXP _farva_rnormArma(SEXP muSEXP, SEXP sig_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sq(sig_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(rnormArma(mu, sig_sq));
    return rcpp_result_gen;
END_RCPP
}
// get_Omega_i
arma::mat get_Omega_i(arma::mat Theta_c, arma::mat xi_i);
RcppExport SEXP _farva_get_Omega_i(SEXP Theta_cSEXP, SEXP xi_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Theta_c(Theta_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi_i(xi_iSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Omega_i(Theta_c, xi_i));
    return rcpp_result_gen;
END_RCPP
}
// sample_xi_ilk
double sample_xi_ilk(double sig_sq_xi, arma::vec beta_c, arma::vec X_i, arma::vec Sigma_0_vec, arma::mat Theta_c, arma::mat xi_i, arma::vec z_i, arma::vec eta_i, int l_samp, int k_samp, int fix_xi);
RcppExport SEXP _farva_sample_xi_ilk(SEXP sig_sq_xiSEXP, SEXP beta_cSEXP, SEXP X_iSEXP, SEXP Sigma_0_vecSEXP, SEXP Theta_cSEXP, SEXP xi_iSEXP, SEXP z_iSEXP, SEXP eta_iSEXP, SEXP l_sampSEXP, SEXP k_sampSEXP, SEXP fix_xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sig_sq_xi(sig_sq_xiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_c(beta_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_i(X_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma_0_vec(Sigma_0_vecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_c(Theta_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi_i(xi_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta_i(eta_iSEXP);
    Rcpp::traits::input_parameter< int >::type l_samp(l_sampSEXP);
    Rcpp::traits::input_parameter< int >::type k_samp(k_sampSEXP);
    Rcpp::traits::input_parameter< int >::type fix_xi(fix_xiSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_xi_ilk(sig_sq_xi, beta_c, X_i, Sigma_0_vec, Theta_c, xi_i, z_i, eta_i, l_samp, k_samp, fix_xi));
    return rcpp_result_gen;
END_RCPP
}
// sample_xi_all
Rcpp::List sample_xi_all(int num_causes, int L, int K, Rcpp::List N, arma::mat sigSqXi_all, Rcpp::List beta_c_all, Rcpp::List X_all_sig, arma::vec Sigma_0_vec, Rcpp::List Theta_all, Rcpp::List xi_all, Rcpp::List z_all, Rcpp::List eta_all, int fix_xi);
RcppExport SEXP _farva_sample_xi_all(SEXP num_causesSEXP, SEXP LSEXP, SEXP KSEXP, SEXP NSEXP, SEXP sigSqXi_allSEXP, SEXP beta_c_allSEXP, SEXP X_all_sigSEXP, SEXP Sigma_0_vecSEXP, SEXP Theta_allSEXP, SEXP xi_allSEXP, SEXP z_allSEXP, SEXP eta_allSEXP, SEXP fix_xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_causes(num_causesSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigSqXi_all(sigSqXi_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type beta_c_all(beta_c_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_all_sig(X_all_sigSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma_0_vec(Sigma_0_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Theta_all(Theta_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type xi_all(xi_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type z_all(z_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type eta_all(eta_allSEXP);
    Rcpp::traits::input_parameter< int >::type fix_xi(fix_xiSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_xi_all(num_causes, L, K, N, sigSqXi_all, beta_c_all, X_all_sig, Sigma_0_vec, Theta_all, xi_all, z_all, eta_all, fix_xi));
    return rcpp_result_gen;
END_RCPP
}
// sample_psi_ik
double sample_psi_ik(double sig_sq_psi, arma::vec alpha_c, arma::vec X_i, arma::vec Sigma_0_vec, arma::mat Omega_i, arma::vec psi_i, arma::vec z_i, arma::vec nu_i, int k_samp);
RcppExport SEXP _farva_sample_psi_ik(SEXP sig_sq_psiSEXP, SEXP alpha_cSEXP, SEXP X_iSEXP, SEXP Sigma_0_vecSEXP, SEXP Omega_iSEXP, SEXP psi_iSEXP, SEXP z_iSEXP, SEXP nu_iSEXP, SEXP k_sampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sig_sq_psi(sig_sq_psiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_c(alpha_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_i(X_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma_0_vec(Sigma_0_vecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_i(Omega_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi_i(psi_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu_i(nu_iSEXP);
    Rcpp::traits::input_parameter< int >::type k_samp(k_sampSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_psi_ik(sig_sq_psi, alpha_c, X_i, Sigma_0_vec, Omega_i, psi_i, z_i, nu_i, k_samp));
    return rcpp_result_gen;
END_RCPP
}
// sample_psi_all
Rcpp::List sample_psi_all(Rcpp::List N, int K, int num_causes, arma::vec sig_sq_psi, Rcpp::List alpha_c_all, Rcpp::List X_all_mu, arma::vec Sigma_0_vec, Rcpp::List Omega_all, Rcpp::List psi_all, Rcpp::List z_all, Rcpp::List nu_all);
RcppExport SEXP _farva_sample_psi_all(SEXP NSEXP, SEXP KSEXP, SEXP num_causesSEXP, SEXP sig_sq_psiSEXP, SEXP alpha_c_allSEXP, SEXP X_all_muSEXP, SEXP Sigma_0_vecSEXP, SEXP Omega_allSEXP, SEXP psi_allSEXP, SEXP z_allSEXP, SEXP nu_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type num_causes(num_causesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sig_sq_psi(sig_sq_psiSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alpha_c_all(alpha_c_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X_all_mu(X_all_muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sigma_0_vec(Sigma_0_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omega_all(Omega_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type psi_all(psi_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type z_all(z_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type nu_all(nu_allSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_psi_all(N, K, num_causes, sig_sq_psi, alpha_c_all, X_all_mu, Sigma_0_vec, Omega_all, psi_all, z_all, nu_all));
    return rcpp_result_gen;
END_RCPP
}
// sample_Theta_j
arma::mat sample_Theta_j(double sig_sq_j, arma::cube xi_c, arma::mat eta_c, arma::vec z_cj, arma::vec Delta_j, arma::vec phi_j, arma::vec tau);
RcppExport SEXP _farva_sample_Theta_j(SEXP sig_sq_jSEXP, SEXP xi_cSEXP, SEXP eta_cSEXP, SEXP z_cjSEXP, SEXP Delta_jSEXP, SEXP phi_jSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sig_sq_j(sig_sq_jSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type xi_c(xi_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta_c(eta_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_cj(z_cjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Delta_j(Delta_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi_j(phi_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_Theta_j(sig_sq_j, xi_c, eta_c, z_cj, Delta_j, phi_j, tau));
    return rcpp_result_gen;
END_RCPP
}
// sample_Delta_jl
double sample_Delta_jl(double phi_jl_delta, double tau_l_delta, arma::vec Theta_jl, double phi_jl_theta, double tau_l_theta);
RcppExport SEXP _farva_sample_Delta_jl(SEXP phi_jl_deltaSEXP, SEXP tau_l_deltaSEXP, SEXP Theta_jlSEXP, SEXP phi_jl_thetaSEXP, SEXP tau_l_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi_jl_delta(phi_jl_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type tau_l_delta(tau_l_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Theta_jl(Theta_jlSEXP);
    Rcpp::traits::input_parameter< double >::type phi_jl_theta(phi_jl_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau_l_theta(tau_l_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_Delta_jl(phi_jl_delta, tau_l_delta, Theta_jl, phi_jl_theta, tau_l_theta));
    return rcpp_result_gen;
END_RCPP
}
// sample_nu
arma::mat sample_nu(arma::mat xi_i, arma::mat Theta_c, arma::mat Sigma_0, arma::mat z_i, arma::vec psi_i);
RcppExport SEXP _farva_sample_nu(SEXP xi_iSEXP, SEXP Theta_cSEXP, SEXP Sigma_0SEXP, SEXP z_iSEXP, SEXP psi_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xi_i(xi_iSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta_c(Theta_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z_i(z_iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi_i(psi_iSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_nu(xi_i, Theta_c, Sigma_0, z_i, psi_i));
    return rcpp_result_gen;
END_RCPP
}
// sample_phi_pl
double sample_phi_pl(double nu, double tau_deltaSq, int C);
RcppExport SEXP _farva_sample_phi_pl(SEXP nuSEXP, SEXP tau_deltaSqSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tau_deltaSq(tau_deltaSqSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_phi_pl(nu, tau_deltaSq, C));
    return rcpp_result_gen;
END_RCPP
}
// sample_delta_theta
double sample_delta_theta(double a1, double a2, arma::mat Delta, arma::cube Theta, arma::mat phi_theta, arma::vec delta_theta, int h);
RcppExport SEXP _farva_sample_delta_theta(SEXP a1SEXP, SEXP a2SEXP, SEXP DeltaSEXP, SEXP ThetaSEXP, SEXP phi_thetaSEXP, SEXP delta_thetaSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi_theta(phi_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_theta(delta_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_delta_theta(a1, a2, Delta, Theta, phi_theta, delta_theta, h));
    return rcpp_result_gen;
END_RCPP
}
// sample_delta_Delta
double sample_delta_Delta(double a1, double a2, arma::mat Delta, arma::mat phi_delta, arma::vec delta_delta, int h);
RcppExport SEXP _farva_sample_delta_Delta(SEXP a1SEXP, SEXP a2SEXP, SEXP DeltaSEXP, SEXP phi_deltaSEXP, SEXP delta_deltaSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type phi_delta(phi_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_delta(delta_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_delta_Delta(a1, a2, Delta, phi_delta, delta_delta, h));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_c
arma::mat sample_beta_c(arma::vec y, arma::vec mu_beta, arma::mat Sigma_beta, double sig_sq, arma::mat XtX, arma::mat Xt);
RcppExport SEXP _farva_sample_beta_c(SEXP ySEXP, SEXP mu_betaSEXP, SEXP Sigma_betaSEXP, SEXP sig_sqSEXP, SEXP XtXSEXP, SEXP XtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_beta(mu_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_beta(Sigma_betaSEXP);
    Rcpp::traits::input_parameter< double >::type sig_sq(sig_sqSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XtX(XtXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xt(XtSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_c(y, mu_beta, Sigma_beta, sig_sq, XtX, Xt));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_mu
arma::mat sample_beta_mu(arma::vec mu_0, arma::mat Lambda_0, double C, arma::vec beta_mean, arma::mat Sigma_beta);
RcppExport SEXP _farva_sample_beta_mu(SEXP mu_0SEXP, SEXP Lambda_0SEXP, SEXP CSEXP, SEXP beta_meanSEXP, SEXP Sigma_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda_0(Lambda_0SEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_mean(beta_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_beta(Sigma_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_mu(mu_0, Lambda_0, C, beta_mean, Sigma_beta));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_Sigma
arma::mat sample_beta_Sigma(int v0, arma::mat S0, int C, arma::vec beta_mu, arma::mat beta_c);
RcppExport SEXP _farva_sample_beta_Sigma(SEXP v0SEXP, SEXP S0SEXP, SEXP CSEXP, SEXP beta_muSEXP, SEXP beta_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_c(beta_cSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_Sigma(v0, S0, C, beta_mu, beta_c));
    return rcpp_result_gen;
END_RCPP
}
// sample_sigsq
double sample_sigsq(double a, double b, int n, double RSS);
RcppExport SEXP _farva_sample_sigsq(SEXP aSEXP, SEXP bSEXP, SEXP nSEXP, SEXP RSSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type RSS(RSSSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_sigsq(a, b, n, RSS));
    return rcpp_result_gen;
END_RCPP
}
// sample_xi_istar
arma::mat sample_xi_istar(arma::mat sig_sq_xi, arma::cube beta_c, arma::vec X_istar, int fix);
RcppExport SEXP _farva_sample_xi_istar(SEXP sig_sq_xiSEXP, SEXP beta_cSEXP, SEXP X_istarSEXP, SEXP fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sig_sq_xi(sig_sq_xiSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type beta_c(beta_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_istar(X_istarSEXP);
    Rcpp::traits::input_parameter< int >::type fix(fixSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_xi_istar(sig_sq_xi, beta_c, X_istar, fix));
    return rcpp_result_gen;
END_RCPP
}
// sample_psi_istar
arma::mat sample_psi_istar(arma::vec sig_sq_psi, arma::mat alpha_c, arma::vec X_istar, int fix_psi);
RcppExport SEXP _farva_sample_psi_istar(SEXP sig_sq_psiSEXP, SEXP alpha_cSEXP, SEXP X_istarSEXP, SEXP fix_psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type sig_sq_psi(sig_sq_psiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_c(alpha_cSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X_istar(X_istarSEXP);
    Rcpp::traits::input_parameter< int >::type fix_psi(fix_psiSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_psi_istar(sig_sq_psi, alpha_c, X_istar, fix_psi));
    return rcpp_result_gen;
END_RCPP
}
// sample_z_mean_cov_all
Rcpp::List sample_z_mean_cov_all(Rcpp::List S_mat, Rcpp::List Omega_all, Rcpp::List eta_all, arma::vec N, arma::vec Sig0vec, Rcpp::List z_all_nominus, Rcpp::List z_all, int P, arma::vec is_binary, Rcpp::List mu_all, bool mu_collapse, Rcpp::List psi_all);
RcppExport SEXP _farva_sample_z_mean_cov_all(SEXP S_matSEXP, SEXP Omega_allSEXP, SEXP eta_allSEXP, SEXP NSEXP, SEXP Sig0vecSEXP, SEXP z_all_nominusSEXP, SEXP z_allSEXP, SEXP PSEXP, SEXP is_binarySEXP, SEXP mu_allSEXP, SEXP mu_collapseSEXP, SEXP psi_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type S_mat(S_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Omega_all(Omega_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type eta_all(eta_allSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Sig0vec(Sig0vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type z_all_nominus(z_all_nominusSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type z_all(z_allSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type is_binary(is_binarySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mu_all(mu_allSEXP);
    Rcpp::traits::input_parameter< bool >::type mu_collapse(mu_collapseSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type psi_all(psi_allSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_z_mean_cov_all(S_mat, Omega_all, eta_all, N, Sig0vec, z_all_nominus, z_all, P, is_binary, mu_all, mu_collapse, psi_all));
    return rcpp_result_gen;
END_RCPP
}
// get_piSgivenY
arma::mat get_piSgivenY(int N_test, int num_causes, int P, int mc_tot, bool cov_incl, int fix_xi, arma::mat X_test_mu, arma::mat X_test_sig, arma::mat S_test, arma::mat sigSqXi_all, Rcpp::List beta_c_all, Rcpp::List Theta_all, bool mu_collapse, Rcpp::List gamma_c_all, Rcpp::List alpha_c_all, arma::mat sigSqpsi_all, arma::mat Sigma_0, arma::vec is_binary);
RcppExport SEXP _farva_get_piSgivenY(SEXP N_testSEXP, SEXP num_causesSEXP, SEXP PSEXP, SEXP mc_totSEXP, SEXP cov_inclSEXP, SEXP fix_xiSEXP, SEXP X_test_muSEXP, SEXP X_test_sigSEXP, SEXP S_testSEXP, SEXP sigSqXi_allSEXP, SEXP beta_c_allSEXP, SEXP Theta_allSEXP, SEXP mu_collapseSEXP, SEXP gamma_c_allSEXP, SEXP alpha_c_allSEXP, SEXP sigSqpsi_allSEXP, SEXP Sigma_0SEXP, SEXP is_binarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_test(N_testSEXP);
    Rcpp::traits::input_parameter< int >::type num_causes(num_causesSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type mc_tot(mc_totSEXP);
    Rcpp::traits::input_parameter< bool >::type cov_incl(cov_inclSEXP);
    Rcpp::traits::input_parameter< int >::type fix_xi(fix_xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test_mu(X_test_muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_test_sig(X_test_sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_test(S_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigSqXi_all(sigSqXi_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type beta_c_all(beta_c_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Theta_all(Theta_allSEXP);
    Rcpp::traits::input_parameter< bool >::type mu_collapse(mu_collapseSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gamma_c_all(gamma_c_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type alpha_c_all(alpha_c_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigSqpsi_all(sigSqpsi_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_0(Sigma_0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type is_binary(is_binarySEXP);
    rcpp_result_gen = Rcpp::wrap(get_piSgivenY(N_test, num_causes, P, mc_tot, cov_incl, fix_xi, X_test_mu, X_test_sig, S_test, sigSqXi_all, beta_c_all, Theta_all, mu_collapse, gamma_c_all, alpha_c_all, sigSqpsi_all, Sigma_0, is_binary));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_farva_rtruncnorm", (DL_FUNC) &_farva_rtruncnorm, 4},
    {"_farva_rmvnrnd", (DL_FUNC) &_farva_rmvnrnd, 3},
    {"_farva_rnormArma", (DL_FUNC) &_farva_rnormArma, 2},
    {"_farva_get_Omega_i", (DL_FUNC) &_farva_get_Omega_i, 2},
    {"_farva_sample_xi_ilk", (DL_FUNC) &_farva_sample_xi_ilk, 11},
    {"_farva_sample_xi_all", (DL_FUNC) &_farva_sample_xi_all, 13},
    {"_farva_sample_psi_ik", (DL_FUNC) &_farva_sample_psi_ik, 9},
    {"_farva_sample_psi_all", (DL_FUNC) &_farva_sample_psi_all, 11},
    {"_farva_sample_Theta_j", (DL_FUNC) &_farva_sample_Theta_j, 7},
    {"_farva_sample_Delta_jl", (DL_FUNC) &_farva_sample_Delta_jl, 5},
    {"_farva_sample_nu", (DL_FUNC) &_farva_sample_nu, 5},
    {"_farva_sample_phi_pl", (DL_FUNC) &_farva_sample_phi_pl, 3},
    {"_farva_sample_delta_theta", (DL_FUNC) &_farva_sample_delta_theta, 7},
    {"_farva_sample_delta_Delta", (DL_FUNC) &_farva_sample_delta_Delta, 6},
    {"_farva_sample_beta_c", (DL_FUNC) &_farva_sample_beta_c, 6},
    {"_farva_sample_beta_mu", (DL_FUNC) &_farva_sample_beta_mu, 5},
    {"_farva_sample_beta_Sigma", (DL_FUNC) &_farva_sample_beta_Sigma, 5},
    {"_farva_sample_sigsq", (DL_FUNC) &_farva_sample_sigsq, 4},
    {"_farva_sample_xi_istar", (DL_FUNC) &_farva_sample_xi_istar, 4},
    {"_farva_sample_psi_istar", (DL_FUNC) &_farva_sample_psi_istar, 4},
    {"_farva_sample_z_mean_cov_all", (DL_FUNC) &_farva_sample_z_mean_cov_all, 12},
    {"_farva_get_piSgivenY", (DL_FUNC) &_farva_get_piSgivenY, 18},
    {NULL, NULL, 0}
};

RcppExport void R_init_farva(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
